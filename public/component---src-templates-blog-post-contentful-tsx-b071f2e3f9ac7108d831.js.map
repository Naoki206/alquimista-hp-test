{"version":3,"sources":["webpack://gatsby-starter-blog/./src/components/blog/card.tsx","webpack://gatsby-starter-blog/./src/components/blog/threeNewContents.tsx","webpack://gatsby-starter-blog/./src/templates/blog-post-contentful.tsx"],"names":["post","isNewsPost","newsOrBlog","className","Link","to","node","slug","itemProp","alt","image","title","src","file","url","updatedAt","category","map","key","author","posts","useStaticQuery","allContentfulPost","edges","options","renderNode","BLOCKS","G","getImage","data","target","location","contentfulPost","blogOrNewsContentsPage","gatsbyImageData","placeholder","createdAt","content","raw","renderRichText"],"mappings":"+hHA8EA,IAzDK,SAAC,GAAD,YAAGA,EAAH,EAAGA,KAAMC,EAAT,EAASA,WAAYC,EAArB,EAAqBA,WAArB,OACH,sBACE,eAAKC,UAAU,QAAf,QACE,uBACE,QAAC,EAAAC,KAAD,CAAMC,GAAI,IAAIH,EAAJ,IAAkBF,EAAKM,KAAKC,MAAU,EAAKC,SAAS,QAC5D,uBAEE,qBAEEC,IAAG,UAAET,EAAKM,KAAKI,aAAZ,aAAE,EAAiBC,MACtBC,IAAG,UAAEZ,EAAKM,KAAKI,aAAZ,iBAAE,EAAiBG,YAAnB,aAAE,EAAuBC,OAE9B,iCAIF,uBACE,oBAA4Bd,EAAKM,KAAKS,aAExC,uBACE,sBAEGd,IAAU,UACTD,EAAKM,KAAKU,gBADD,aACT,EAAoBC,KAAI,SAAAD,GAAQ,OAC9B,mBAEEE,IAAKF,GAEJA,SAIT,sBACE,sBAEER,SAAS,YAERR,aAJH,EAIGA,EAAMM,KAAKK,QAGfV,IACC,uBACE,qBAEEW,IAAG,IAAMZ,EAAKM,KAAKa,OAAhB,OACHV,IAAI,wBAEN,kCAA8CT,EAAKM,KAAKa,gB,kZCpBxE,IAzCmC,WACjC,IA0BMC,GA1BOC,oBAAc,cA0BRC,kBAAkBC,MAErC,OACE,sBACE,sBACGH,EAAMH,KAAI,SAAAjB,GAAI,OAEb,QAAC,IAAD,CAAMA,KAAMA,EAAMkB,IAAKlB,aAAF,EAAEA,EAAMM,KAAKC,KAAML,WAAW,gB,mHC5B7D,IAAMsB,EAAU,CACdC,YAAU,OAEPC,qBAAwB,SAACpB,GAAD,OAOvB,QAAC,EAAAqB,EAAD,CAEEjB,OAAOkB,OAAStB,EAAKuB,KAAKC,QAC1BrB,IAAKH,EAAKuB,KAAKC,OAAOnB,SAZlB,I,6+FAmFZ,UAhEE,SAAC,GAAwB,IAAD,MAArBkB,EAAqB,EAArBA,KAAME,EAAe,EAAfA,SACD/B,EAAO6B,EAAKG,eAClB,OACE,QAAC,IAAD,CAAQD,SAAUA,EAAUE,wBAAsB,IAEhD,uBACE,uBACE,QAAC,EAAAN,EAAD,OAGEjB,MAAOV,SAAF,UAAEA,EAAMU,aAAR,aAAE,EAAawB,gBACpBzB,IAAI,QACJ0B,YAAY,aAEd,sBAAmDnC,aAAnD,EAAmDA,EAAMW,QACzD,uBACE,qBAEEC,IAAG,KAAMZ,aAAN,EAAMA,EAAMmB,QAAZ,OACHV,IAAI,wBAEN,oBACE,kCAA2DT,aAA3D,EAA2DA,EAAMmB,SAEhEnB,aAAA,EAAAA,EAAMoC,YAAYpC,aAAlB,EAAkBA,EAAMe,YACvB,uBACE,oBACGf,aADH,EACGA,EAAMoC,YAET,oBAAiDpC,aAAjD,EAAiDA,EAAMe,aAGzD,uBACE,oBAAiDf,aAAjD,EAAiDA,EAAMoC,gBAQjE,oBAAMpC,SAAA,UAAAA,EAAMqC,eAAN,eAAeC,OAAOC,OAAevC,EAAKqC,QAASb,KACzD,sBAEGxB,SAFH,UAEGA,EAAMgB,gBAFT,aAEG,EAAgBC,KAAI,SAAAD,GAAQ,OAC3B,mBAEEE,IAAKF,GAEJA,SAKT,uBACE,gCACA,uBACE,QAAC,IAAD","file":"component---src-templates-blog-post-contentful-tsx-b071f2e3f9ac7108d831.js","sourcesContent":["/* eslint-disable camelcase */\n/* eslint-disable react/destructuring-assignment */\nimport React from 'react';\nimport { Link } from 'gatsby';\n\nimport 'twin.macro';\n\nconst Card: React.FC<{\n  post: {\n    node: {\n      contentslugful_id: string;\n      image: { title: string | undefined; file: { url: string | undefined } };\n      updatedAt: string;\n      category?: Array<string>;\n      title: string;\n      author?: string;\n      slug: string;\n    };\n  };\n  isNewsPost: boolean;\n  newsOrBlog: string;\n}> = ({ post, isNewsPost, newsOrBlog }) => (\n  <li tw=\"w-full\">\n    <div className=\"group\" tw=\"border-black mb-16 h-80 sm:h-72 md:h-80 lg:h-96\">\n      <div tw=\"group-hover:opacity-80 transition duration-300\">\n        <Link to={`/${newsOrBlog}/${post.node.slug}` || '/'} itemProp=\"url\">\n          <div tw=\"relative overflow-hidden rounded-xl\">\n            {/* eslint-disable-next-line jsx-a11y/img-redundant-alt */}\n            <img\n              tw=\"w-full h-48 sm:h-48 lg:h-60 object-cover transform group-hover:scale-110 transition duration-300\"\n              alt={post.node.image?.title}\n              src={post.node.image?.file?.url}\n            />\n            <p tw=\"hidden group-hover:block bg-lightGreen bg-opacity-75 hover:bg-opacity-100 rounded-full px-5 py-2 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-blue-50\">\n              Noteで読む\n            </p>\n          </div>\n          <div tw=\"my-2\">\n            <p tw=\"mb-0 text-gray-500\">{post.node.updatedAt}</p>\n          </div>\n          <div tw=\"px-2\">\n            <div tw=\"flex flex-wrap mb-1.5\">\n              {/* @ts-ignore */}\n              {isNewsPost ||\n                post.node.category?.map(category => (\n                  <p\n                    tw=\"mr-2 mb-0 px-2 text-sm rounded-full border-gray-400 border text-gray-500 font-bold\"\n                    key={category}\n                  >\n                    {category}\n                  </p>\n                ))}\n            </div>\n            <h6 tw=\"m-0\">\n              <span\n                tw=\"group-hover:text-lightGreen transition duration-300 text-lg font-extrabold\"\n                itemProp=\"headline\"\n              >\n                {post?.node.title}\n              </span>\n            </h6>\n            {isNewsPost || (\n              <div tw=\"flex items-center\">\n                <img\n                  tw=\"w-9 rounded-full mr-4\"\n                  src={`/${post.node.author}.png`}\n                  alt=\"{post.node.author}\"\n                />\n                <p tw=\"text-gray-700 m-0 text-xs\">Written By {post.node.author}</p>\n              </div>\n            )}\n          </div>\n        </Link>\n      </div>\n    </div>\n  </li>\n);\n\nexport default Card;\n","/* eslint-disable jsx-a11y/img-redundant-alt */\nimport * as React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport 'twin.macro';\nimport Card from './card';\n\n// const BlogIndex = ({ data, location }) => {\nconst ThreeNewContents: React.FC = () => {\n  const data = useStaticQuery<GatsbyTypes.ThreeNewContentsQuery>(graphql`\n    query ThreeNewContents {\n      allContentfulPost(\n        filter: { node_locale: { eq: \"ja-JP\" } }\n        sort: { order: DESC, fields: updatedAt }\n        limit: 3\n      ) {\n        edges {\n          node {\n            title\n            category\n            author\n            slug\n            updatedAt(formatString: \"YYYY.MM.DD\")\n            image {\n              title\n              file {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const posts = data.allContentfulPost.edges;\n  // @ts-ignore\n  return (\n    <ol tw=\"list-none mb-0 \">\n      <div tw=\"text-left grid md:grid-cols-2 lg:grid-cols-3 gap-5 sm:gap-12\">\n        {posts.map(post => (\n          // @ts-ignore\n          <Card post={post} key={post?.node.slug} newsOrBlog=\"blog\" />\n        ))}\n      </div>\n    </ol>\n  );\n};\n\nexport default ThreeNewContents;\n","/* eslint-disable jsx-a11y/img-redundant-alt */\n/* eslint-disable react/display-name */\n/* eslint-disable react/destructuring-assignment */\nimport * as React from 'react';\nimport { graphql, PageProps } from 'gatsby';\nimport { renderRichText } from 'gatsby-source-contentful/rich-text';\nimport { BLOCKS } from '@contentful/rich-text-types';\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image';\nimport 'twin.macro';\n\nimport Layout from '../components/layout';\nimport ThreeNewContents from '../components/blog/threeNewContents';\n\nconst options = {\n  renderNode: {\n    // eslint-disable-next-line react/display-name\n    [BLOCKS.EMBEDDED_ASSET]: (node: {\n      data: {\n        target: {\n          title: string;\n        };\n      };\n    }) => (\n      <GatsbyImage\n        // @ts-ignore\n        image={getImage(node.data.target)}\n        alt={node.data.target.title}\n      />\n    ),\n  },\n};\n\nconst BlogPostContentfulTemplate: React.FC<PageProps<GatsbyTypes.ContentfulBlogPostBySlugQuery>> =\n  ({ data, location }) => {\n    const post = data.contentfulPost;\n    return (\n      <Layout location={location} blogOrNewsContentsPage>\n        {/* <Seo title={post?.title || 'undefined'} /> */}\n        <div tw=\" mx-5 sm:mx-14 md:mx-28 lg:mx-52 xl:mx-96\">\n          <div tw=\"my-16\">\n            <GatsbyImage\n              tw=\"w-full md:h-72 lg:h-96\"\n              // @ts-ignore\n              image={post?.image?.gatsbyImageData}\n              alt=\"aiueo\"\n              placeholder=\"blurred\"\n            />\n            <div tw=\"text-xl sm:text-3xl font-bold pt-8 pb-8\">{post?.title}</div>\n            <div tw=\"flex gap-3 items-center\">\n              <img\n                tw=\"w-10 h-10 sm:w-12 sm:h-12 rounded-full mr-4\"\n                src={`/${post?.author}.png`}\n                alt=\"{post.node.author}\"\n              />\n              <div>\n                <p tw=\"text-sm sm:text-base text-gray-700 m-0\">Written By {post?.author}</p>\n                {/* @ts-ignore */}\n                {post?.createdAt < post?.updatedAt ? (\n                  <div tw=\"my-2\">\n                    <p tw=\"line-through text-sm sm:text-base text-gray-500 mb-0\">\n                      {post?.createdAt}\n                    </p>\n                    <p tw=\"text-sm sm:text-base text-gray-500 mb-0\">{post?.updatedAt}</p>\n                  </div>\n                ) : (\n                  <div tw=\"my-2\">\n                    <p tw=\"text-sm sm:text-base text-gray-500 mb-0\">{post?.createdAt}</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* @ts-ignore */}\n          <div>{post?.content?.raw && renderRichText(post.content, options)}</div>\n          <div tw=\"flex flex-wrap mb-1.5\">\n            {/* @ts-ignore */}\n            {post?.category?.map(category => (\n              <p\n                tw=\"mr-2 mb-0 px-2 text-sm rounded-full border-gray-400 border text-gray-500 font-bold\"\n                key={category}\n              >\n                {category}\n              </p>\n            ))}\n          </div>\n        </div>\n        <div tw=\"mx-5 mt-3 sm:mt-16 sm:mx-10 md:mx-14 lg:mx-32\">\n          <p tw=\"pt-7 border-t border-gray-400 text-center md:text-2xl font-bold\">おすすめの記事</p>\n          <div tw=\"pb-80 md:pb-60 lg:pb-56 \">\n            <ThreeNewContents />\n          </div>\n        </div>\n      </Layout>\n    );\n  };\n\nexport default BlogPostContentfulTemplate;\n\nexport const pageQuery = graphql`\n  query ContentfulBlogPostBySlug($slug: String!) {\n    contentfulPost(slug: { eq: $slug }) {\n      title\n      author\n      createdAt(formatString: \"YYYY/MM/DD HH:mm:ss\")\n      updatedAt(formatString: \"YYYY/MM/DD HH:mm:ss\")\n      category\n      slug\n      content {\n        raw\n        references {\n          ... on ContentfulAsset {\n            id\n            contentful_id\n            __typename\n            title\n            fixed(width: 1600) {\n              width\n              height\n              src\n            }\n            title\n            gatsbyImageData(formats: AUTO)\n          }\n        }\n      }\n      image {\n        gatsbyImageData\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}